#######################RTMP############################
# rtmp端口
listen              1935;
#进程pid文件以保证单进程.
pid                 ./objs/srs.pid;
# 块大小 128-65536,默认:60000
chunk_size          10000;
# log日志目录 
ff_log_dir          ./objs;
# 日志输出方式 可设置为:console,file(终端或文件)
srs_log_tank        file;
# 日志级别:,可设置为:verbose, info, trace, warn, error(详细,信息,跟踪,警告,错误),默认: trace
srs_log_level       trace;
# 日志文件
srs_log_file        ./objs/srs.log;
# 最大连接数
max_connections     1000;
# 是否以守护进程开启,可设置为:on,off(开或关)
daemon              on;
# 是否使用utc_time生成时间,可设置为:on,off(on即gmtime(),off即localtime())
utc_time            off;
# 服务根目录
work_dir ./;
# 非daemon进程时,父进程一旦改变即终止srs,可设置为:on,off
asprocess off;

####################### 心跳与统计 ############################
# 心跳,需先设置stats.network,心跳与统计信息(设备与ip)连至api服务器,防止发生故障时一无所知
heartbeat {
    # 是否开启
    enabled         off;
    # 心跳间隔,建议3的倍数如0.3,0.6,0.9,1.2,1.5,1.8,2.1,2.4,2.7,3,...,6,9,12,....
    interval        6;
    #api地址,srs将发送本机设备与ip数据:{"device_id": "my-srs-device","ip": "192.168.1.100"}
    url             http://127.0.0.1:8085/api/v1/servers;
    # 设置ID
    device_id       "my-srs-device";
    # 是否在数据中带上摘要数据:{"summaries": summaries object},可设置为on,off
    summaries       off;
}
# 统计,如cpu/mem/network/disk-io等数据.
stats {
    # 设备的index编号
    network         0;
    # 磁盘名称
    disk            sda sdb xvda xvdb;
}

################ HTTP(全局) ################
# 以http端api管理srs,如:
# http://192.168.1.170:1985/api/v1/reload即类似killall -1 srs的命令进行重启.
# 注意cli仅限于shell/终端中
http_api {
    # 是否启用,可设置为:on,off
    enabled         on;
    # 监听端口 如格式为ip:port或:port如192.168.1.100:1985或:1985
    listen          1985;
    # 是否允许跨域,可设置为:on,off
    crossdomain     on;
}

# http内置服务器
http_server {
    # 是否启用,可设置为:on,off
    enabled         on;
    # 监听端口 如格式为ip:port或:port如192.168.1.100:8080或:8080
    # 注意若设置为80,则需以root身份启用srs
    listen          8080;
    # http根目录
    dir             ./objs/nginx/html;
}

################ Streamer流转换器 ################
# 将推送的其它流转为RTMP流,如推送RTSP或MPEG-TS转为RTMP,以便分发为RTMP/HLS/HTTP等.
# 允许按需转换的流设置多个stream_caster,如分别设置mpegts_over_udp,flv,rtsp.
stream_caster {
    # 是否启用,可设置为:on,off
    enabled         off;
    # 流协议类型,可选mpegts_over_udp,flv,rtsp.
    caster          rtsp;
    # 输出地址 如rtsp://192.168.1.173:8935/live/livestream.sdp转为rtmp://127.0.0.1/live/livestream
    output          rtmp://127.0.0.1/[app]/[stream];
    # 监听端口 如格式为ip:port或:port如192.168.1.100:8080或:8080
    # mpegts_over_udp默认8935,rtsp默认554,flv默认8936.
    listen          554;
    # 若类型为rtsp,用以下端口段回复消息.
    rtp_port_min    57200;
    rtp_port_max    57300;
}
stream_caster {
    enabled         off;
    caster          mpegts_over_udp;
    output          rtmp://127.0.0.1/[app]/[stream];
    listen          8935;
}

################ 杂项(全局) ################
# 打印间隔(忽略客户端并发性能),默认10000毫秒.
pithy_print_ms      10000;

################ VHOST ################
# 默认vhost
vhost __defaultVhost__ {
}
# 按站点配置
vhost security.srs.com {

    ########## 安全 ##########
    # 是否开启低延迟模式,如禁用mr(推流时合并读取),mw(播放时合并写入)或在consumer队列中使用超时等待
    min_latency     on;
    # 是否开启tcp_nodelay,可设置为:on,off,on即用setsockopt设置fd的nodelay
    tcp_nodelay     on;
    # MR合并读取
    mr {
        # 是否开启mr,可设置为:on,off
        enabled     off;
        # mr延迟时间,建议100-2000(ms).例如latency=500ms, kbps=3000kbps,
        # 每发布都需要 500 * (3000 / 8) = 183KB,这样2500个发布需消耗183KB * 2500.
        latency     100;
    }
    # 是否开启gop_cache,可设置为on或off
    # 播放前需先取得视频流中两个I帧的时间距离,on马上进入播放状态,off为低延迟
    gop_cache       off;
    # 是否开启累计延迟,可设置为on或off
    queue_length    10;
    # mw延迟时间,建议100-18000(ms).
    mw_latency      100;

    # v3.0
    # play {
       # gop_cache       off;
       # queue_length    10;
       # mw_latency      100;
    # }
    # publish {
       # mr off;
    # }
    
    ########## refer防盗链 ##########
    # 推播流来路,未设置即全部允许
    refer           github.com github.io;
    # 推流来路,未设置即全部允许
    refer_publish   github.com github.io;
    # 播流来路,未设置即全部允许
    refer_play      github.com github.io;
    
    
    ########## CDN集群:源站与边缘服务器 ##########
    # 主机模式,可选local,remote
    #  local: 当前为源站
    #  remote: 当前为别源的edge直播缓存服务器如源站在北京,各省均有同本机一样的边缘缓存服务器.而直播边缘流时如本机找不到缓存将回源查找.
    mode            remote;
    # remote模式时的源站列表如127.0.0.1:1935 localhost:1935 192.168.1.100:1935 192.168.1.101:1935
    origin          127.0.0.1:1935 localhost:1935;
    # remote模式是否开启令牌遍历,可设置为on或off
    token_traverse  off;
    # tremote模式配置回源的vhost如推流给up.com并回源down.com,这样down.com即可播放up.com的流.
    vhost           same.edge.srs.com;

    ########## RTMP流录制为flv ##########
    dvr {
        # 是否开启录制,可设置为on或off
        enabled         on;
        # 录制方式,可选session,segment
        #  session:按推流session会话,停推即关,整个session录成1个flv
        #  segment:按时长配置dvr_duration和dvr_wait_keyframe,注意dvr_wait_keyframe设为on,否则会花屏
        dvr_plan        session;
        # 录制路径及名称,常用标签:
        #       [vhost]=当前vhost,[app]=流app,[stream]=流名称
        #       [2006]=年,[01]=月,[02]=日,[15]=时,[04]=分,[05]=秒,[999]=毫秒
        #       [timestamp]=当前时间戳
        #       例子1:/data/[vhost]/[app]/[stream]/[2006]/[01]/[02]-[15].[04].[05].[999].flv;
        #       例子2:/data/[app]/[stream].[timestamp].flv;
        dvr_path        ./objs/nginx/html/[app]/[stream].[timestamp].flv;
        # 分段时长,segment模式时必需,如30秒1个文件
        dvr_duration    30;
        # 关键帧等待,segment模式时必需on
        dvr_wait_keyframe       on;
        # 时间戳抖动算法,可选full,zero,off.(full使用完全时间戳矫正；zero只保证从0开始；off不矫正时间戳)
        time_jitter             full;
        # v3.0 需要开启录制的流,可针对某个流或all
        # dvr_apply all|(live/stream)
    }
    
    ########## 采集与拉流(视频文件或RTMP外其它协议转为RTMP并推至srs) ##########
    # 流转码设置
    transcode {
        # 是否启用,可设置为:on,off
        enabled     on;
        # ffmpeg路径
        ffmpeg      ./objs/ffmpeg/bin/ffmpeg;
        # the transcode engine for matched stream.
        # all matched stream will transcoded to the following stream.
        # the transcode set name(ie. hd) is optional and not used.
        engine example {
            # 是否启用,可设置为:on,off
            enabled         on;
            # 原始格式如:flv,mp4,ts
            iformat         flv;
            # ffmpeg 滤镜(水印等)
            vfilter {
                # logo
                i               ./doc/ffmpeg-logo.png;
                # 滤镜
                filter_complex  'overlay=10:10';
            }
            # 视频编码器:可选libx264,copy,vn(copy即拷贝原始视频编码,vn即禁止输出为视频)
            vcodec          libx264;
            # 视频码率
            vbitrate        1500;
            # 视频帧率
            vfps            25;
            # 视频宽度
            vwidth          768;
            # 视频高度
            vheight         320;
            # ffmpeg编码线程数
            vthreads        12;
            # x264的profile,可选high,main,baseline
            vprofile        main;
            # x264的preset,可选ultrafast,superfast,veryfast,faster,fast,medium,slow,slower,veryslow,placebo
            vpreset         medium;
            # 其它自定义视频编码参数
            vparams {
                t               100;
                coder           1;
                b_strategy      2;
                bf              3;
                refs            10;
            }
            # 音频编码器,可选libfdk_aac,copy,an(禁止音频)
            acodec          libfdk_aac;
            # 音频输出码率,libaacplus:16-72k,libfdk_aac没有限制
            abitrate        70;
            # 音频采样率
            asample_rate    44100;
            # 音频声道
            achannels       2;
            # 其它自定义音频编码参数
            aparams {
                # 还支持: aac_low, aac_he, aac_he_v2
                profile:a   aac_low;
                bsf:a       aac_adtstoasc;
            }
            # 输出的视频格式
            oformat         flv;
            # 输出地址
            output          rtmp://127.0.0.1:[port]/[app]?vhost=[vhost]/[stream]_[engine];
        }
    }
    
    ########## ingest livestream ##########
    # 注意ingest后面的id(livestream)唯一性,以便api管理.
    ingest livestream {
        # 是否开启ingest,可设置为on或off
        enabled      on;
        # 拉流输入
        input {
            # 输入类型,可选file,stream,device(视频文件,流地址,设备)
            type    file;
            # 输入地址,文件路径或url
            url     ./doc/source.200kbps.768x320.flv;
        }
        # ffmpeg路径
        ffmpeg      ./objs/ffmpeg/bin/ffmpeg;
        # 拉流转码与输出
        engine {
            # 是否开启,vcodec/acodec(视频编码/音频编码) 或 off
            enabled          off;
            # 输出数值,常用标签[vhost]=当前vhost,[port]当前RTMP端口
            output          rtmp://127.0.0.1:[port]/live?vhost=[vhost]/livestream;
        }
    }

    ########## HTTP(vhost) ##########
    # HTTP分发静态文件
    http_static {
        # 是否启用,可设置为:on,off
        enabled     on;
        # 挂载网址,常用标签[vhost]=当前vhost,为空将覆盖__defaultVhost__的http_server设置
        # 例子:
        # 挂到指定 [vhost]/ ,可访地址:http://ossrs.net:8080/xxx.html
        # 挂到指定 [vhost]/hls ,可访地址:http://ossrs.net:8080/hls/xxx.html
        # 挂到本机 / ,可访地址:http://192.168.1.173:8080/xxx.html
        # 挂到本机 /hls ,可访地址:http://192.168.1.173:8080/hls/xxx.html
        mount       [vhost]/hls;
        # 分发vhost的HTTP流的所在目录
        dir       ./objs/nginx/html/hls;
    }
    
    # HTTP动态转封装(RTMP流转封装为 HTTP Live FLV/Mp3/Aac/Hls/Hds/MPEG-DASH流)
    http_remux {
        # 是否启用,可设置为:on,off
        enabled     on;
        #是否fast cache,audio类音频流必填,视频流忽略,可填整数,0即禁止缓存.
        fast_cache  30;
        #转封装路径,可用标签[vhost],[app],[stream].支持后缀格式.flv,.ts,.mp3,.aac,.ts
        # 例子:其余后缀(.ts,.mp3,.aac,.ts)类同
        # 挂到指定 [vhost]/[app]/[stream].flv ,可访地址:http://ossrs.net:8080/live/livestream.flv
        # 挂到指定 /[app]/[stream].flv,可访地址:http://192.168.1.173:8080/live/livestream.flv
        mount       [vhost]/[app]/[stream].flv;
        # 是否开启回源(合并会员或本地无流时standby并回源站),local模式忽略,可设置为:on,off
        hstrs       on;
    }
    
    # HTTP回调
    #1.srs将数据POST至HTTP服务器后,需返回HTTP200且response为int 0如php("echo 0;exit;"),其它错误码会断开客户端连接
    #2.HTTP回调地址可多个,以空格隔开.
    http_hooks {
        # 是否启用,可设置为:on,off
        enabled         on;
        # 当客户端连接到vhost和app时
        # json数据:
        #       {
        #           "action": "on_connect",
        #           "client_id": 1985,
        #           "ip": "192.168.1.10", "vhost": "video.test.com", "app": "live",
        #           "tcUrl": "rtmp://video.test.com/live?key=d2fa801d08e3f90ed1e1670e6e52651a",
        #           "pageUrl": "http://www.test.com/live.html"
        #       }
        on_connect      http://127.0.0.1:8085/api/v1/clients http://localhost:8085/api/v1/clients;
        
        # 当客户端关闭连接，或者SRS主动关闭连接时
        # json数据:
        #       {
        #           "action": "on_close",
        #           "client_id": 1985,
        #           "ip": "192.168.1.10", "vhost": "video.test.com", "app": "live",
        #           "send_bytes": 10240, "recv_bytes": 10240
        #       }
        on_close        http://127.0.0.1:8085/api/v1/clients http://localhost:8085/api/v1/clients;
        
        # 当客户端推流到服务器时
        # json数据:
        #       {
        #           "action": "on_publish",
        #           "client_id": 1985,
        #           "ip": "192.168.1.10", "vhost": "video.test.com", "app": "live",
        #           "stream": "livestream", "param":"?token=xxx&salt=yyy"
        #       }
        on_publish      http://127.0.0.1:8085/api/v1/streams http://localhost:8085/api/v1/streams;
        
        # 当客户端停止推流时
        # json数据:
        #       {
        #           "action": "on_unpublish",
        #           "client_id": 1985,
        #           "ip": "192.168.1.10", "vhost": "video.test.com", "app": "live",
        #           "stream": "livestream", "param":"?token=xxx&salt=yyy"
        #       }
        on_unpublish    http://127.0.0.1:8085/api/v1/streams http://localhost:8085/api/v1/streams;
        
        # 当客户端开始播放流时
        # json数据:
        #       {
        #           "action": "on_play",
        #           "client_id": 1985,
        #           "ip": "192.168.1.10", "vhost": "video.test.com", "app": "live",
        #           "stream": "livestream", "param":"?token=xxx&salt=yyy",
        #           "pageUrl": "http://www.test.com/live.html"
        #       }
        on_play         http://127.0.0.1:8085/api/v1/sessions http://localhost:8085/api/v1/sessions;
        
        # 当客户端停止播放时。备注：停止播放可能不会关闭连接，还能再继续播放
        # json数据:
        #       {
        #           "action": "on_stop",
        #           "client_id": 1985,
        #           "ip": "192.168.1.10", "vhost": "video.test.com", "app": "live",
        #           "stream": "livestream", "param":"?token=xxx&salt=yyy"
        #       }
        on_stop         http://127.0.0.1:8085/api/v1/sessions http://localhost:8085/api/v1/sessions;
        
        # 当DVR生成每个flv文件时
        # json数据:
        #       {
        #           "action": "on_dvr",
        #           "client_id": 1985,
        #           "ip": "192.168.1.10", "vhost": "video.test.com", "app": "live",
        #           "stream": "livestream", "param":"?token=xxx&salt=yyy",
        #           "cwd": "/usr/local/srs",
        #           "file": "./objs/nginx/html/live/livestream.1420254068776.flv"
        #       }
        on_dvr          http://127.0.0.1:8085/api/v1/dvrs http://localhost:8085/api/v1/dvrs;
        
        # 当hls生成每个ts文件时
        # json数据:
        #       {
        #           "action": "on_hls",
        #           "client_id": 1985,
        #           "ip": "192.168.1.10", "vhost": "video.test.com", "app": "live",
        #           "stream": "livestream", "param":"?token=xxx&salt=yyy",
        #           "duration": 9.36, // in seconds
        #           "cwd": "/usr/local/srs",
        #           "file": "./objs/nginx/html/live/livestream/2015-04-23/01/476584165.ts",
        #           "url": "live/livestream/2015-04-23/01/476584165.ts",
        #           "m3u8": "./objs/nginx/html/live/livestream/live.m3u8",
        #           "m3u8_url": "live/livestream/live.m3u8",
        #           "seq_no": 100
        #       }
        on_hls          http://127.0.0.1:8085/api/v1/hls http://localhost:8085/api/v1/hls;
        
        # 当hls完成生成每个ts文件时,使用HTTP GET获得一个ts,无需任何回调.
        # 可用标签:[app],[stream,[param],[ts_url], 
        on_hls_notify   http://127.0.0.1:8085/api/v1/hls/[app]/[stream]/[ts_url][param];
    }
    
    ########## hls|hds配置 ##########
    hls {
        # 是否启用,可设置为:on,off
        enabled         on;
        # ts的分片时长(秒),hls将视频分成片,所以延迟了每个片时长,数值越低,文件越琐碎但延迟更少.
        hls_fragment    3;
        # 切片EXT-X-TARGETDURATION最大值即hls_fragment*hls_td_ratio
        hls_td_ratio    1.5;
        # 仅音频时有效,ts超过hls_fragment时即hls_fragment*hls_td_ratio切片
        hls_aof_ratio   1.5;
        # hls window即m3u8中ts文件的时长之和,超过时长即废弃.保证中时长在hls_window内
        hls_window      60;
        # 容错,可选continue,ignore,disconnect(继续,忽略,断开)
        hls_on_error    continue;
        # hls m3u8保存目录,会在该目录下创建[app]/[stream].m3u8及[app]/[stream]-[seq].ts
        hls_path        ./objs/nginx/html;
        # hls m3u8名称,可用[vhost],[app],stream]
        hls_m3u8_file   [app]/[stream].m3u8;
        # hls ts录制路径及名称,常用标签:
        #       [vhost]=当前vhost,[app]=流app,[stream]=流名称
        #       [2006]=年,[01]=月,[02]=日,[15]=时,[04]=分,[05]=秒,[999]=毫秒
        #       [timestamp]=当前时间戳,[seq]=自增ID
        #       例子1:[vhost]/[app]/[stream]/[2006]/[01]/[02]-[15].[04].[05].[999].ts;
        #       例子2:[app]/[stream].[timestamp]-[seq].ts;
        hls_ts_file     [app]/[stream]-[seq].ts;
        # 是否使用floor(timestamp/hls_fragment)生成[timestamp],
        hls_ts_floor    off;
        # url前缀如http://your-server/test则生成http://your-server/test/live/livestream-0.ts,默认为空
        hls_entry_prefix ;
        # 默认音频编码,可选aac或mp3,默认aac
        hls_acodec      aac;
        # 默认视频编码,可选h264,vn(纯音频类如音乐可直接设置该值),默认h264
        hls_vcodec      h264;
        # 是否清除过期ts切片
        hls_cleanup     on;
        # 清除过期的时间(秒),0即不清除,10清理10秒前的ts切片
        hls_dispose     0;
        # on_hls_notify设置后从notify服务器读取数据的长度
        hls_nb_notify   64;
        # 等待到关键帧后开始切片
        hls_wait_keyframe       on;
    }
    
    hds {
        # 是否启用hds
        enabled         off;
        # 切片时长
        hds_fragment    5;
        # hds window即m3u8中ts文件的时长之和,超过时长即废弃.保证中时长在hds_window内
        hds_window      60;
        # hds 保存目录
        hds_path        ./objs/nginx/html;
    }
    
    ########## 带宽检查 ##########
    bandcheck {
        # 是否启用,可设置为:on,off
        enabled         off;
        # 服务器密匙
        key             "35c9b402c12a7246868752e2878f7e0e";
        # 带宽检查的间隔时长(秒)
        interval        30;
        # 按kbs的最大可用带宽
        limit_kbps      4000;
    }
    
    ########## 杂项(vhost) ##########
    # 时间戳抖动算法,可选full,zero,off.(full使用完全时间戳矫正；zero只保证从0开始；off不矫正时间戳)
    time_jitter             full;
    # 是否使用interleaved/mixed 算法纠正时间戳on,off
    mix_correct             off;
    # 是否自动开启act
    atc             off;
    atc_auto        on;
    # 是否启用vhost,可选on,off
    enabled         off;
    #从边缘回源获得调试信息
    debug_srs_upnode    on;
    #是否在推流时解析sps视频以便获得如视频分辨率,但也可能导致推流失败.
    publish {
        parse_sps   on;
    }
    # 最小数据包发送间隔(ms),0禁止
    send_min_interval     0;
    # 是否可重复序列头
    reduce_sequence_header  off;
    # 第1个数据包超时时长(ms)
    publish_1stpkt_timeout  20000;
    # 正常数据包超时时长(ms)
    publish_normal_timeout  7000;
    # forward区别于cdn的remote,适用于小集群,将当前流转发至指定的多台服务器
    forward         127.0.0.1:1936 127.0.0.1:1937;
}    
####################### 更多 ############################
# 各种转码请参考相关conf
